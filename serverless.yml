service: fws
frameworkVersion: '3'
useDotenv: true
provider:
  name: aws
  stackName: ${env:FWS_ENV_NAME}${env:FWS_LOC}${self:service}
  apiName: ${env:FWS_ENV_NAME}${self:service}2-rest-api
  runtime: nodejs18.x
  iam:
    role: ${env:FWS_LAMBDA_ROLE}
  stage: ${env:FWS_ENV_NAME}
  region: ${env:FWS_REGION}
  deploymentBucket:
    name: ${env:FWS_BUCKET}
  environment:
    stage: ${env:FWS_ENV_NAME}
    FWS_DB_USERNAME: ${ssm:/${self:provider.environment.stage}/ldn/fws/webops/postgres/db_user}
    FWS_DB_NAME: ${ssm:/${self:provider.environment.stage}/ldn/fws/webops/postgres/db_name}
    FWS_DB_HOST: ${ssm:/${self:provider.environment.stage}/ldn/fws/webops/postgres/db_host}
    FWS_DB_PASSWORD: ${self:custom.supersecret}
    FWS_SNS_TOPIC: ${env:FWS_SNS_TOPIC}
    FWS_FE_TAG: ${env:FWS_FE_TAG}
  vpc:
    securityGroupIds:
      - ${env:FWS_VPN_SEC_GRP}
    subnetIds:
      - ${env:FWS_SUB_1}
      - ${env:FWS_SUB_2}
  apiGateway:
    restApiId: ${env:FWS_API_ID}
    restApiRootResourceId: ${env:FWS_ROOT_ID}
    metrics: true
  tags:
    Environment: ${upper:${env:FWS_ENV_NAME}}
    Project: "Flood Warnings System Replacement"
    Source: "Terraform managed"
    ServiceCode: FWS
    Region: ${env:FWS_REGION}
    ServiceType: LOB
    ServiceName: "Flood Warnings System Replacement"
package:
  exclude:
    - test
functions:
  processMessage:
    name: ${env:FWS_ENV_NAME}${env:FWS_LOC}${self:service}-processMessage
    handler: lib/functions/process-message.handler
    kmsKeyArn: ${env:FWS_KMS_KEY_ARN}
    tags:
      Name: ${env:FWS_ENV_NAME}${env:FWS_LOC}${self:service}-processMessage
    events:
      - http:
          method: post
          path: message
          integration: lambda
          request:
            passThrough: WHEN_NO_TEMPLATES
            template:
              text/html: '{ "bodyXml": $input.json("$")}'
              application/json: ''
              application/x-www-form-urlencoded: ''
          authorizer: 
            name: authorizer
            type: request
            identitySource: method.request.header.x-api-key
            resultTtlInSeconds: 0
          response:
            headers:
              X-DNS-Prefetch-Control: "'off'"
              Strict-Transport-Security: "'max-age=15552000; includeSubDomains; preload'"
              X-Download-Options: "'noopen'"
              X-Content-Type-Options: "'nosniff'"
              Referrer-Policy: "'no-referrer'"
  # activateTargetArea:
  #   name: ${env:FWS_ENV_NAME}${self:service}-activateTargetArea
  #   handler: lib/functions/activate-target-area.handler
  #   events:
  #     - http:
  #         method: post
  #         path: activate-target-area
  #         integration: lambda
  #         request:
  #           passThrough: WHEN_NO_TEMPLATES
  #           template:
  #             text/html: '{ "bodyXml": $input.json("$")}'
  #             application/json: ''
  #             application/x-www-form-urlencoded: ''
  #         authorizer: 
  #           name: authorizer
  #           type: request
  #           identitySource: method.request.header.x-api-key
  #           resultTtlInSeconds: 0
  # deactivateTargetArea:
  #   name: ${env:FWS_ENV_NAME}${self:service}-deactivateTargetArea
  #   handler: lib/functions/deactivate-target-area.handler
  #   events:
  #     - http: 
  #         method: post
  #         path: deactivate-target-area
  #         integration: lambda
  #         request:
  #           passThrough: WHEN_NO_TEMPLATES
  #           template:
  #             text/html: '{ "bodyXml": $input.json("$")}'
  #             application/json: ''
  #             application/x-www-form-urlencoded: ''
  #         authorizer: 
  #           name: authorizer
  #           type: request
  #           identitySource: method.request.header.x-api-key
  #           resultTtlInSeconds: 0
  getAllMessages:
    name: ${env:FWS_ENV_NAME}${env:FWS_LOC}${self:service}-getAllMessages
    handler: lib/functions/get-all-messages.handler
    kmsKeyArn: ${env:FWS_KMS_KEY_ARN}
    tags:
      Name: ${env:FWS_ENV_NAME}${env:FWS_LOC}${self:service}-getAllMessages
    events:
      - http:
          method: get
          path: fwis.xml
          authorizer: 
            name: authorizer
            type: request
            identitySource: method.request.header.x-api-key
            resultTtlInSeconds: 0
      - http:
          method: get
          path: fwis.json
          authorizer: 
            name: authorizer
            type: request
            identitySource: method.request.header.x-api-key
            resultTtlInSeconds: 0
      - http:
          method: get
          path: fwis-plus.json
          authorizer:
            name: authorizer
            type: request
            identitySource: method.request.header.x-api-key
            resultTtlInSeconds: 0
  getAllTargetAreas:
    name: ${env:FWS_ENV_NAME}${env:FWS_LOC}${self:service}-getAllTargetAreas
    handler: lib/functions/get-all-target-areas.handler
    kmsKeyArn: ${env:FWS_KMS_KEY_ARN}
    tags:
      Name: ${env:FWS_ENV_NAME}${env:FWS_LOC}${self:service}-getAllTargetAreas
    events:
      - http:
          method: get
          path: target-areas.json
          authorizer: 
            name: authorizer
            type: request
            identitySource: method.request.header.x-api-key
            resultTtlInSeconds: 0
  getAllHistoricalMessages:
    name: ${env:FWS_ENV_NAME}${env:FWS_LOC}${self:service}-getAllHistoricalMessages
    handler: lib/functions/get-all-historical-messages.handler
    kmsKeyArn: ${env:FWS_KMS_KEY_ARN}
    tags:
      Name: ${env:FWS_ENV_NAME}${env:FWS_LOC}${self:service}-getAllHistoricalMessages
    events:
      - http:
          method: get
          path: historical-messages/{code}
          authorizer: 
            name: authorizer
            type: request
            identitySource: method.request.header.x-api-key
            resultTtlInSeconds: 0
  authorizer:
    name: ${env:FWS_ENV_NAME}${env:FWS_LOC}${self:service}-authorizer
    handler: lib/functions/authorizer.handler
    kmsKeyArn: ${env:FWS_KMS_KEY_ARN}
    tags:
      Name: ${env:FWS_ENV_NAME}${env:FWS_LOC}${self:service}-authorizer
plugins:
  - serverless-layers
# Uncomment folling lines when running serverless offline instance
#
# plugins:
#   - serverless-offline
# custom:
#   serverless-offline:
#     httpPort: 8050
custom:
   supersecret: ${ssm:/aws/reference/secretsmanager//${self:provider.environment.stage}/ldn/fws/webops/postgres/db_password}
